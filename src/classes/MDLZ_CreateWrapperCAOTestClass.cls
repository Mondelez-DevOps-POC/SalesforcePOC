/***************************************************************
Name: MDLZ_CreateWrapperCAOTestClass
======================================================
Purpose:
a.Create a batch of EDI Orders and NOS orders to check if there is a CAO order corresponding to it, 
if not then create a cao order with no line items and phase as Open.
======================================================
History
-------
VERSION     AUTHOR         REVIEWER      DATE             DETAIL              Description
1.0      Bharath V              19/09/2021     Initial Development    Test Class for MDLZ_CreateWrapperCAOOrder and Batchs
1.1      Vaidehi Heda           25/03/2022     Made the changes as per Nova Report
***************************************************************/
@isTest
private class MDLZ_CreateWrapperCAOTestClass {
    
    static testMethod void testCAOOrder(){
        
        //List<ACCL__Order__c> ord2 = MDLZ_TestDataFactory.insertOrder2(1, false);
        Account   acct= new Account();
        acct.Name ='Mondelez Record@123';
        acct.ACCL__Account_Number__c='Mondelez Demo 12';
        acct.Description ='Mondelez Demo 12';        
        insert acct;
        
        ACCL__Order_Template__c   ordertempWrapper =  new ACCL__Order_Template__c(Name ='Order Wrapper',RecordTypeId =Schema.SObjectType.ACCL__Order_Template__c.getRecordTypeInfosByName().get('Order Entry').getRecordTypeId(),
                                                                              ACCL__Document_Type__c='Order Entry',ACCL__Valid_Thru__c=system.today()+360,
                                                                              ACCL__Valid_From__c=system.today(),RE_Order_Template_ExternalID__c='OrderWrapper_US01',
                                                                              ACCL__Sales_Org__c='US01',ACCL__Active__c=true,MDLZ_IsOrderWrapper__c =true);
        
        Insert ordertempWrapper;
        
        ACCL__Order_Template__c   ordertempEdi =  new ACCL__Order_Template__c(Name ='EDI',RecordTypeId =Schema.SObjectType.ACCL__Order_Template__c.getRecordTypeInfosByName().get('Order Entry').getRecordTypeId(),
                                                                              ACCL__Document_Type__c='Order Entry',ACCL__Valid_Thru__c=system.today()+360,
                                                                              ACCL__Valid_From__c=system.today(),RE_Order_Template_ExternalID__c='OrderEDI_US01',
                                                                              ACCL__Sales_Org__c='US01',ACCL__Active__c=true);
        
        Insert ordertempEdi;
        
        
        ACCL__Order__c ord = new ACCL__Order__c();
        ord.ACCL__Phase__c ='Open';
        ord.ACCL__Delivery_Date__c =System.today()+33;
        ord.ACCL__Order_Account__c =acct.Id;
        ord.ACCL__Order_Template__c =ordertempEdi.Id;
        ord.MDLZ_isChanged__c='True';
        ord.MDLZ_isOrderAccepted__c =true;
        ord.MDLZ_IsSFAutoGenerated__c =true;
        ord.ACCL__Customer_Order_Id__c ='1234609';
        insert Ord;
        
         ACCL__Order__c ordOp = new ACCL__Order__c();
        ordOp.ACCL__Phase__c ='Open';
        ordOp.ACCL__Delivery_Date__c =System.today()+31;
        ordOp.ACCL__Order_Account__c =acct.Id;
        ordOp.ACCL__Order_Template__c =ordertempEdi.Id;
        ordOp.MDLZ_isChanged__c='True';
        ordOp.MDLZ_isOrderAccepted__c =true;
        ordOp.MDLZ_IsSFAutoGenerated__c =true;
        insert ordOp;
        
        ACCL__Order__c ordWrap = new ACCL__Order__c();
        ordWrap.ACCL__Phase__c ='Open';
        ordWrap.ACCL__Delivery_Date__c =System.today()+33;
        ordWrap.ACCL__Order_Account__c =acct.Id;
        ordWrap.ACCL__Order_Template__c =ordertempWrapper.Id;
        ordWrap.MDLZ_isChanged__c='True';
        ordWrap.MDLZ_isOrderAccepted__c =true;
        ordWrap.MDLZ_IsSFAutoGenerated__c =true;
        insert ordWrap;

		ACCL__Order__c ord1 = new ACCL__Order__c();
        ord1.ACCL__Phase__c ='Received By SAP';
        ord1.ACCL__Delivery_Date__c =System.today()+32;
        ord1.ACCL__Order_Account__c =acct.Id;
        ord1.ACCL__Order_Template__c =ordertempEdi.Id;
        ord1.MDLZ_isChanged__c='True';
        ord1.MDLZ_isOrderAccepted__c =true;
        ord1.MDLZ_IsSFAutoGenerated__c =true;
       // ord1.ACCL__Customer_Order_Id__c ='12346091';
        insert Ord1;        
        
        ACCL__Order__c ord2 = new ACCL__Order__c();
        ord2.ACCL__Phase__c ='Send to SAP';
        ord2.ACCL__Delivery_Date__c =System.today()+30;
        ord2.ACCL__Order_Account__c =acct.Id;
        ord2.ACCL__Order_Template__c =ordertempEdi.Id;
        ord2.MDLZ_isChanged__c='True';
        ord2.MDLZ_isOrderAccepted__c =true;
        ord2.MDLZ_IsSFAutoGenerated__c =true;
       // ord1.ACCL__Customer_Order_Id__c ='12346091';
        insert ord2;  
        
        System.assertEquals('Open', ord.ACCL__Phase__c);
        
        Test.startTest(); 
        MDLZ_CreateWrapperOrderBatch batch= new MDLZ_CreateWrapperOrderBatch(10);
        SchedulableContext sc = null;
        batch.execute(sc); 
        Test.stopTest();
    }    
}