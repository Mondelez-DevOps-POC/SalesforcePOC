name: Salesforce-workflow
on:
  pull_request:
    branches:
    - 'development'
    - 'main'
    types: 
    - closed  

jobs:
  salesforce:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
  
  salesforce-deploy:
    needs: salesforce
    if: |
      (github.event_name == 'pull_request'   && github.event.pull_request.merged == true) &&
      ((contains(github.head_ref, 'feature') && github.base_ref == 'development') ||
      (github.head_ref == 'development'  && github.base_ref == 'main'))   
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
        
    
    - name: Auth sandbox, validate and deploy
      env:
       SFDC_POC_USERNAME_DEV: ${{ secrets.SFDC_POCDEV_USERNAME }}
       SFDC_POC_PASSWORD_DEV: ${{ secrets.SFDC_POCDEV_PASSWORD }}
       SFDC_POC_SERVERURL_DEV: ${{ secrets.SFDC_POCDEV_SERVERURL }}
       SFDC_POC_USERNAME_PROD: ${{ secrets.SFDC_POCPROD_USERNAME }}
       SFDC_POC_PASSWORD_PROD: ${{ secrets.SFDC_POCPROD_PASSWORD }}
       SFDC_POC_SERVERURL_PROD: ${{ secrets.SFDC_POCPROD_SERVERURL }}  
      run: |
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "Current branch is $BRANCH"
        if [[ $BRANCH == development ]]; then
          sed -i 's|SFDC_POC_USERNAME|'"$SFDC_POC_USERNAME_DEV"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_PASSWORD|'"$SFDC_POC_PASSWORD_DEV"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_SERVERURL|'"$SFDC_POC_SERVERURL_DEV"'|g' $GITHUB_WORKSPACE/build.properties
        else [[ $BRANCH == main ]];       
          sed -i 's|SFDC_POC_USERNAME|'"$SFDC_POC_USERNAME_PROD"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_PASSWORD|'"$SFDC_POC_PASSWORD_PROD"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_SERVERURL|'"$SFDC_POC_SERVERURL_PROD"'|g' $GITHUB_WORKSPACE/build.properties
        fi
        
        export MANIFEST_FOLDER=$(jq -r '.MANIFEST_FOLDER.FOLDER' devops/params.json)
        echo "Manifest folder: $MANIFEST_FOLDER"
        mkdir $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/lib/  
        cp $GITHUB_WORKSPACE/lib/* $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/lib/
        cp $GITHUB_WORKSPACE/lib/* /usr/share/ant/lib/
        
        mkdir /tmp/src
        cp $GITHUB_WORKSPACE/src/package.xml /tmp/src
        for i in `cat $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/project-manifest-TPM.txt`;
        do
          folder_name=`echo $i | cut -d "/" -f 2`
          echo $folder_name >>/tmp/folder_name.txt  
        done
        cat /tmp/folder_name.txt | sort | uniq>>/tmp/ufolder_name.txt
                
        for i in `cat /tmp/ufolder_name.txt`;
        do
           mkdir /tmp/src/$i
        done
        
        rsync $GITHUB_WORKSPACE/src/* /tmp/src && rm -rf $GITHUB_WORKSPACE/src/*
        ls -R /tmp/src
        for i in `cat $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/project-manifest-TPM.txt`;
        do
           if [ -f /tmp/$i ]; then
           echo "$i is present in both manifest and src"
           else
           rm -rf /tmp/$i
        fi
        done
        
        rsync /tmp/src $GITHUB_WORKSPACE/src
        ls -lrth $GITHUB_WORKSPACE/src
        
        
        
        
       

        
        
